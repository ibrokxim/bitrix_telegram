<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Services\TelegramService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class AuthController extends Controller
{
    protected $telegramService;

    public function __construct(TelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    public function checkPhone(Request $request)
    {
        try {
            $phone = $this->formatPhone($request->phone);
            $user = User::where('phone', $phone)->first();

            if ($user) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
                $adminMessage = sprintf(
                    "üîµ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:\n\n" .
                    "üë§ –ò–º—è: %s %s\n" .
                    "üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s\n" .
                    "üÜî ID: %s\n" .
                    "üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s",
                    $user->first_name,
                    $user->last_name,
                    $user->phone,
                    $user->id,
                    $user->created_at->format('d.m.Y H:i')
                );

                $this->telegramService->sendMessageToAdmin($adminMessage);

                Log::info('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è', [
                    'user_id' => $user->id,
                    'phone' => $user->phone
                ]);

                return response()->json([
                    'exists' => true,
                    'user' => $user
                ]);
            }

            return response()->json([
                'exists' => false
            ]);

        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' . $e->getMessage(), [
                'phone' => $request->phone ?? '–Ω–µ —É–∫–∞–∑–∞–Ω',
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'error' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            ], 500);
        }
    }

    protected function formatPhone($phone)
    {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        $phone = preg_replace('/[^0-9]/', '', $phone);

        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
        if (strlen($phone) === 11 && $phone[0] === '8') {
            $phone = '7' . substr($phone, 1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º + –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if ($phone[0] !== '+') {
            $phone = '+' . $phone;
        }

        return $phone;
    }
} 